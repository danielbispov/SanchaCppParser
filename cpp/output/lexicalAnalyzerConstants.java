/* Generated By:JavaCC: Do not edit this line. lexicalAnalyzerConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface lexicalAnalyzerConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int LCURLYBRACE = 1;
  /** RegularExpression Id. */
  int RCURLYBRACE = 2;
  /** RegularExpression Id. */
  int LPARENTHESIS = 3;
  /** RegularExpression Id. */
  int RPARENTHESIS = 4;
  /** RegularExpression Id. */
  int SEMICOLON = 5;
  /** RegularExpression Id. */
  int ASSIGNEQUAL = 6;
  /** RegularExpression Id. */
  int TIMESEQUAL = 7;
  /** RegularExpression Id. */
  int DIVIDEEQUAL = 8;
  /** RegularExpression Id. */
  int MODEQUAL = 9;
  /** RegularExpression Id. */
  int PLUSEQUAL = 10;
  /** RegularExpression Id. */
  int MINUSEQUAL = 11;
  /** RegularExpression Id. */
  int OR = 12;
  /** RegularExpression Id. */
  int AND = 13;
  /** RegularExpression Id. */
  int EQUAL = 14;
  /** RegularExpression Id. */
  int NOTEQUAL = 15;
  /** RegularExpression Id. */
  int LESSTHAN = 16;
  /** RegularExpression Id. */
  int GREATERTHAN = 17;
  /** RegularExpression Id. */
  int LESSTHANOREQUALTO = 18;
  /** RegularExpression Id. */
  int GREATERTHANOREQUALTO = 19;
  /** RegularExpression Id. */
  int PLUS = 20;
  /** RegularExpression Id. */
  int MINUS = 21;
  /** RegularExpression Id. */
  int STAR = 22;
  /** RegularExpression Id. */
  int DIVIDE = 23;
  /** RegularExpression Id. */
  int MOD = 24;
  /** RegularExpression Id. */
  int PLUSPLUS = 25;
  /** RegularExpression Id. */
  int MINUSMINUS = 26;
  /** RegularExpression Id. */
  int CHAR = 27;
  /** RegularExpression Id. */
  int CONST = 28;
  /** RegularExpression Id. */
  int DO = 29;
  /** RegularExpression Id. */
  int DOUBLE = 30;
  /** RegularExpression Id. */
  int ELSE = 31;
  /** RegularExpression Id. */
  int FLOAT = 32;
  /** RegularExpression Id. */
  int FOR = 33;
  /** RegularExpression Id. */
  int IF = 34;
  /** RegularExpression Id. */
  int INT = 35;
  /** RegularExpression Id. */
  int RETURN = 36;
  /** RegularExpression Id. */
  int CASE = 37;
  /** RegularExpression Id. */
  int SWITCH = 38;
  /** RegularExpression Id. */
  int VOID = 39;
  /** RegularExpression Id. */
  int WHILE = 40;
  /** RegularExpression Id. */
  int TRUETOK = 41;
  /** RegularExpression Id. */
  int FALSETOK = 42;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int COMENTARIO_LINHA = 1;
  /** Lexical state. */
  int COMENTARIO_BLOCO = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"{\"",
    "\"}\"",
    "\"(\"",
    "\")\"",
    "\";\"",
    "\"=\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"+=\"",
    "\"-=\"",
    "\"||\"",
    "\"&&\"",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"++\"",
    "\"--\"",
    "\"char\"",
    "\"const\"",
    "\"do\"",
    "\"double\"",
    "\"else\"",
    "\"float\"",
    "\"for\"",
    "\"if\"",
    "\"int\"",
    "\"return\"",
    "\"case\"",
    "\"switch\"",
    "\"void\"",
    "\"while\"",
    "\"true\"",
    "\"false\"",
    "\" \"",
    "\"\\t\"",
    "\"\\r\\n\"",
    "\"\\n\"",
    "\"//\"",
    "\"/*\"",
    "\"\\n\"",
    "\"*/\"",
  };

}
