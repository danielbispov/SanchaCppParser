INCIAL -> ATRIBUIÇÃO; | REPETICAO | SE | FUNÇÃO

ATRIBUIÇÃO -> TIPO IDENTIFICADOR = ARITMETICO | TIPO IDENTIFICADOR | IDENTIFICADOR = ARITMETICO | IDENTIFICADOR | IDENTIFICADOR++ | IDENTIFICADOR--

--

IDENTIFICADOR -> [a-zA-Z][a-zA-Z0-9]*

TIPO -> int | float | char | void


SE -> if(CONDICAO){BLOCO} || if(CONDICAO){BLOCO}else{BLOCO} | if(CONDICAO){BLOCO}else SE

REPETICAO -> PARA | FAÇAENQUANTO | ENQUANTO | ESCOLHA

PARA -> for([ATRIBUIÇÃO]; [CONDICAO]; [ATRIBUIÇÃO]){BLOCO}
FAÇAENQUANTO -> do{BLOCO}while(CONDICAO)
ENQUANTO -> while(CONDICAO){BLOCO}
ESCOLHA -> switch(CONDICAO){ESCAUX}
ESCAUX -> [case INTEIRO: BLOCO]* | default: BLOCO 

FUNÇÃO -> TIPO IDENTIFICADOR(){BLOCO} | TIPO IDENTIFICADOR(ATRIBUIÇÃO[, ATRIBUIÇÃO]*){BLOCO}

CONDICAO -> ATCOND > ATCOND | ATCOND < ATCOND | ATCOND == ATCOND | ATCOND >= ATCOND | ATCOND <= ATCOND | ATCOND != ATCOND | ATCOND | 
((CONDICAO) [LOGICO (CONDICAO)]*)
LOGICO -> && | ||
ATCOND -> IDENTIFICADOR | NUMERO | true | false
BLOCO -> ATRIBUIÇÃO; | return RETURN; | break; | continue;
RETURN -> IDENTIFICADOR | ARITMETICO

ARITMETICO -> EXPRESSAO + EXPRESSAO | EXPRESSAO - EXPRESSAO | EXPRESSAO * EXPRESSAO | EXPRESSAO / EXPRESSAO | EXPRESSAO
EXPRESSAO -> NUMERO | ( ARITMETICO )
NUMERO -> INTEIRO | FLOAT | DOUBLE
INTEIRO -> [0-9]*


